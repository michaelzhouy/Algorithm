# 翻转单词顺序

## 说明
例如输入字符串"I am a student. "，则输出"student. a am I"。

## 示例
```
输入: "the sky is blue"
输出: "blue is sky the"

输入: "  hello world!  "
输出: "world! hello"
解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。

输入: "a good   example"
输出: "example good a"
解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
```

## 解1 用split(' ')
```python
class Solution:
    def reverseWords(self, s: str) -> str:
        s = s.strip()
        res = [i for i in s.split(' ') if i != ''][::-1]
        return ' '.join(res)
```

## 解2 用split() 默认以所有的空字符，包括空格、换行(\n)、制表符(\t)等
```python
class Solution:
    def reverseWords(self, s: str) -> str:
        return ' '.join(s.strip().split()[::-1])
```

## 解3 双指针
```python
class Solution:
    def reverseWords(self, s: str) -> str:
        s = s.strip() # 删除首尾空格
        # 从后向前搜索
        i = j = len(s) - 1
        res = []
        while i >= 0:
            # 搜索首个空格
            while i >= 0 and s[i] != ' ':
                i -= 1
            res.append(s[i + 1: j + 1]) # 添加单词
            # 跳过单词间空格
            while s[i] == ' ':
                i -= 1
            # j 指向下个单词的尾字符
            j = i
        # 拼接并返回
        return ' '.join(res)
```